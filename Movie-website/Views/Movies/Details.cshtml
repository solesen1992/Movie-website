@model Movie_website.Models.Movie
@{
    // The ViewBag holds whether the movie is in the user's wishlist.
    // Start by assuming the movie is not in the wishlist
    bool isInWishlist = false;

    // Check if ViewBag.IsInWishlist has a value
    if (ViewBag.IsInWishlist != null)
    {
        // Try to convert the value to a boolean
        isInWishlist = (bool)ViewBag.IsInWishlist;
    }
}

<!-- BEGINNING OF CONTENT -->

<div class="text-white detail-container-mobile" style="background-image: url('@Model.BackdropUrl'); background-size: cover; padding: 4rem; min-height: 80vh;">
    <div class="container bg-dark bg-opacity-75 rounded p-4">
        <div class="row">
            <!-- This section creates a responsive image container for the movie's poster. -->
            <div class="row-cols-12 col-sm-12 col-md-12 col-lg-4 text-center">
                <!-- Display the movie's poster with responsive sizing and rounded corners. -->
                <img src="@Model.PosterUrl" class="img-fluid rounded shadow mx-auto d-block" />
            </div>

            <!-- This section displays the movie details, including the title, description, genres, and buttons. -->
            <div class="row-cols-12 col-sm-12 col-md-12 col-lg-8 container-mobile-tablet">

                <!-- Display the movie title and release year. -->
                <h1>@Model.Title (@Model.ReleaseYear)</h1>

                <!-- Display the movie's overview or description. -->
                <p>@Model.Overview</p>

                <!-- Display the genres for the movie, joined by a comma. -->
                @if (Model.Genres != null && Model.Genres.Count > 0)
                {
                    <p>
                        <strong>Genres:</strong>
                        @{
                            string allGenres = "";
                            int index = 0;
                            int total = Model.Genres.Count;

                            foreach (var genre in Model.Genres)
                            {
                                allGenres += genre.Name;

                                // Add comma and space unless it's the last genre
                                if (index < total - 1)
                                {
                                    allGenres += ", ";
                                }

                                index++;
                            }
                        }
                        @allGenres
                    </p>
                }

                <!-- Display the Wishlist button with different actions based on whether the movie is in the wishlist. -->
                <div class="d-grid gap-2 d-md-flex justify-content-md-start">
                    @if (isInWishlist)
                    {
                        <!-- This form removes the movie from the wishlist. -->
                        <form method="post" action="/Wishlist/Remove">
                            <input type="hidden" name="id" value="@Model.Id" />
                            <button class="btn btn-danger">Remove from wishlist</button>
                        </form>
                    }
                    else
                    {
                        <!-- This form adds the movie to the wishlist. -->
                        <form method="post" action="/Wishlist/Add">
                            <input type="hidden" name="id" value="@Model.Id" />
                            <button class="btn btn-success">Add to wishlist</button>
                        </form>
                    }
                </div>

                <!-- If a trailer is available, embed a YouTube video player to display it. -->
                @if (Model.Videos != null && Model.Videos.Results != null)
                {
                    // Declare a variable to store the trailer
                    Video trailer = null;

                    // Loop through all videos to find the first YouTube trailer
                    foreach (var video in Model.Videos.Results)
                    {
                        if (video.Type == "Trailer" && video.Site == "YouTube")
                        {
                            trailer = video;
                            break; // Stop the loop once we find the first matching trailer
                        }
                    }

                    // If a trailer was found, show it
                    if (trailer != null)
                    {
                        <div class="mt-4">
                            <iframe width="100%" height="315"
                                    src="https://www.youtube.com/embed/@trailer.Key"
                                    frameborder="0"
                                    allowfullscreen>
                            </iframe>
                        </div>
                    }
                }

                <!-- Display the first 5 cast members of the movie. -->
                @if (Model.Credits != null && Model.Credits.Cast != null && Model.Credits.Cast.Count > 0)
                {
                    <div class="mt-4">
                        <h5>Cast</h5>
                        <ul>
                            @{
                                int count = 0;

                                foreach (var actor in Model.Credits.Cast)
                                {
                                    <li>@actor.Name as @actor.Character</li>
                                    ;
                                    count++;

                                    if (count == 5)
                                    {
                                        break; // Stop after showing 5 actors
                                    }
                                }
                            }
                        </ul>
                    </div>
                }

                <!-- Display the crew members, specifically directors. -->
                @if (Model.Credits != null && Model.Credits.Crew != null)
                {
                    // Create a list to store directors
                    List<Crew> directors = new List<Crew>();

                    // Loop through the crew to find all directors
                    foreach (var person in Model.Credits.Crew)
                    {
                        if (person.Job == "Director")
                        {
                            directors.Add(person);
                        }
                    }

                    // If we found any directors, show them
                    if (directors.Count > 0)
                    {
                        <div class="mt-4">
                            <h5>
                                @if (directors.Count == 1)
                                {
                                    @:Director
                                }
                                else
                                {
                                    @:Directors
                                }
                            </h5>
                            <ul>
                                @foreach (var director in directors)
                                {
                                    <li>@director.Name</li>
                                }
                            </ul>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>