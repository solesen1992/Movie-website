using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Movie_website.BusinessLogic;
using Movie_website.Models;

/*
 * HomeController
 * 
 * This controller is responsible for showing the homepage and general pages like Privacy and Error.
 * 
 * What it does:
 * - Shows the homepage with movies and series grouped by genre (Index method)
 * - Shows the privacy page (Privacy method)
 * - Shows the error page if something goes wrong (Error method)
 * 
 * Some methods are async because they need to fetch data from the API.
 * Other methods are not async when they just return a view without needing to fetch data.
 */

namespace Movie_website.Controllers
{
    public class HomeController : Controller
    {
        private readonly IHomeLogic _homeLogic;

        /*
         * Constructor
         * 
         * This constructor initializes the services needed to get movies and series data.
         */
        public HomeController(IHomeLogic homeLogic)
        {
            _homeLogic = homeLogic;
        }

        /*
         * Index()
         * 
         * This method shows the homepage. It fetches movies and series by specific genres 
         * and displays a preview of 6 movies/series per genre.
         * The method has a lot of helper methods to prevent the method from being too long.
         * 
         * It is async because it needs to wait for the movie and series data from the API.
         */
        public async Task<IActionResult> Index()
        {
            // Hent homepage data via business logic laget
            var homepageViewModel = await _homeLogic.GetHomePageDataAsync();

            // Returnér den færdige viewmodel til visningen
            return View(homepageViewModel);
        }



        /**************************************************************************
         * The following methods are autogenerated
         **************************************************************************/

        /*
         * Privacy()
         * 
         * This method shows the Privacy page.
         * It is not async because it does not need to fetch data.
         */
        public IActionResult Privacy()
        {
            return View();
        }

        /*
         * Error()
         * 
         * This method shows the Error page if something goes wrong.
         * It creates an ErrorViewModel that contains a RequestId to help identify the error.
         * 
         * It is not async because it only creates an object and returns a view — no need to wait for external data.
         */
        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            // return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });

            // Create a new ErrorViewModel object
            ErrorViewModel errorModel = new ErrorViewModel();

            // Check if Activity.Current is not null
            if (Activity.Current != null)
            {
                // Set the RequestId to the current Activity Id
                errorModel.RequestId = Activity.Current.Id;
            }
            else
            {
                // If Activity.Current is null, use the HttpContext TraceIdentifier
                errorModel.RequestId = HttpContext.TraceIdentifier;
            }

            // Pass the model to the View
            return View(errorModel);
        }
    }
}
